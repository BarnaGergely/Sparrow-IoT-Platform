// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Infrastructure;

#nullable disable

namespace Server.Infrastructure.Migrations
{
    [DbContext(typeof(MeasurementsContext))]
    partial class MeasurementsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("Server.Domain.Entities.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Devices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Device 1"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Device 2"
                        });
                });

            modelBuilder.Entity("Server.Domain.Entities.Measurement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("MeasurementTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("ReceptionTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("SensorId");

                    b.ToTable("Measurements");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Kind = 0,
                            ReceptionTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SensorId = 1,
                            Value = 24.799999237060547
                        },
                        new
                        {
                            Id = 2,
                            Kind = 0,
                            ReceptionTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SensorId = 1,
                            Value = 12.0
                        },
                        new
                        {
                            Id = 3,
                            Kind = 0,
                            ReceptionTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SensorId = 2,
                            Value = 0.47999998927116394
                        },
                        new
                        {
                            Id = 4,
                            Kind = 0,
                            ReceptionTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SensorId = 2,
                            Value = 0.8970000147819519
                        },
                        new
                        {
                            Id = 5,
                            Kind = 0,
                            ReceptionTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SensorId = 3,
                            Value = 12.0
                        },
                        new
                        {
                            Id = 6,
                            Kind = 0,
                            ReceptionTime = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            SensorId = 3,
                            Value = 19876.0
                        });
                });

            modelBuilder.Entity("Server.Domain.Entities.Sensor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Kind")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.ToTable("Sensors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DeviceId = 1,
                            Kind = 0,
                            Name = "Sensor 1"
                        },
                        new
                        {
                            Id = 2,
                            DeviceId = 1,
                            Kind = 2,
                            Name = "Sensor 2"
                        },
                        new
                        {
                            Id = 3,
                            DeviceId = 2,
                            Kind = 3,
                            Name = "Sensor 3"
                        });
                });

            modelBuilder.Entity("Server.Domain.Entities.Measurement", b =>
                {
                    b.HasOne("Server.Domain.Entities.Sensor", "Sensor")
                        .WithMany("Measurments")
                        .HasForeignKey("SensorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Server.Domain.Entities.Sensor", b =>
                {
                    b.HasOne("Server.Domain.Entities.Device", "Device")
                        .WithMany("Sensors")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");
                });

            modelBuilder.Entity("Server.Domain.Entities.Device", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("Server.Domain.Entities.Sensor", b =>
                {
                    b.Navigation("Measurments");
                });
#pragma warning restore 612, 618
        }
    }
}
