// <auto-generated />
using System;
using DevTest;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DevTest.Migrations
{
    [DbContext(typeof(TestingContext))]
    [Migration("20240730160307_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.7");

            modelBuilder.Entity("DevTest.DeviceV3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("DevTest.SensorV3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("DeviceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DeviceV3Id")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SensorValueV2TypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeviceV3Id");

                    b.ToTable("Sensors");
                });

            modelBuilder.Entity("DevTest.SensorValueV3", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("TEXT");

                    b.Property<int>("SensorId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SensorV3Id")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("SensorV3Id");

                    b.ToTable("SensorValues");

                    b.HasDiscriminator().HasValue("SensorValueV3");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DevTest.SensorValueV3FloatNumber", b =>
                {
                    b.HasBaseType("DevTest.SensorValueV3");

                    b.Property<float>("Value")
                        .HasColumnType("REAL");

                    b.HasDiscriminator().HasValue("SensorValueV3FloatNumber");
                });

            modelBuilder.Entity("DevTest.SensorValueV3IntNumber", b =>
                {
                    b.HasBaseType("DevTest.SensorValueV3");

                    b.Property<int>("Value")
                        .HasColumnType("INTEGER");

                    b.ToTable("SensorValues", t =>
                        {
                            t.Property("Value")
                                .HasColumnName("SensorValueV3IntNumber_Value");
                        });

                    b.HasDiscriminator().HasValue("SensorValueV3IntNumber");
                });

            modelBuilder.Entity("DevTest.SensorV3", b =>
                {
                    b.HasOne("DevTest.DeviceV3", "DeviceV3")
                        .WithMany("Sensors")
                        .HasForeignKey("DeviceV3Id");

                    b.Navigation("DeviceV3");
                });

            modelBuilder.Entity("DevTest.SensorValueV3", b =>
                {
                    b.HasOne("DevTest.SensorV3", "SensorV3")
                        .WithMany("Messures")
                        .HasForeignKey("SensorV3Id");

                    b.Navigation("SensorV3");
                });

            modelBuilder.Entity("DevTest.DeviceV3", b =>
                {
                    b.Navigation("Sensors");
                });

            modelBuilder.Entity("DevTest.SensorV3", b =>
                {
                    b.Navigation("Messures");
                });
#pragma warning restore 612, 618
        }
    }
}
